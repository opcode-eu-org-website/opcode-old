-- uwidaczniamy biblioteke IEEE
library ieee;

-- uzywamy z tej biblioteki wszystkich elementow z pakietu std_logic_1164
-- pozwala to na pisanie std_logic zamast ieee.std_logic_1164.std_logic
use ieee.std_logic_1164.all;
-- oraz z pakietu numeric_std
use ieee.numeric_std.all;


-- deklarujemy nasz wlasny pakiet
package moj_pakiet is
	-- w ramach niego bedzie funkcja to_bits()
	function to_bits(liczba, dlugosc_wektora : in integer) return  std_logic_vector;
	-- oraz to_int()
	function to_int(wartosc_bitowa : in std_logic_vector) return integer;
	-- procedury w odruznieniu od funkcji moga modyfikowac przekazane do nich argumenty ...
	procedure zwieksz(dane: inout std_logic_vector; ovf: out std_logic);
end package;

-- definiujemy zawartosc naszego pakietu
package body moj_pakiet is
	function to_bits(liczba, dlugosc_wektora : in integer) return  std_logic_vector is
		begin
			return std_logic_vector(to_unsigned(liczba,dlugosc_wektora));
	end function;
	
	function to_int(wartosc_bitowa : in std_logic_vector) return integer is
		begin
			return to_integer(unsigned(wartosc_bitowa));
	end function;
	
	procedure zwieksz(dane: inout std_logic_vector; ovf: out std_logic) is
		begin
			-- petkla for po calym zakresie binarnym wektora wejsciowo/wyjsciowego
			-- to cos po ' nazywa sie atrybutem ...
			-- xx'range zwraca zakres xx'left to xx'right
			-- xx'right jest maksymalnym indeksem wektora
			-- ...
			F1: for i in dane'range loop
				-- przypisanie do zmiennej
				dane(i) := not dane(i);
				-- przerwanie petli (tak jak break w C)
				exit when dane(i) = '1';
				-- pomiedzy exit a when mozna podac etykiete petli z ktorej chemy wyjsc ...
				
				-- jezeli petla doszla do konca
				-- nieosiagajac warunku przerwania to mamy przepelnienie
				if i = dane'right then
					ovf := '1';
				else
					-- galaz else jest obowiazkowa gdy nie chemy tworzyc zatrzaskow
					ovf := '0';
				end if;
			end loop;
	end procedure;
end;
