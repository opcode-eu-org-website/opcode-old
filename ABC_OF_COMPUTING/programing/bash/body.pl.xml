<article>
<title>Programowanie w Bash'u</title>

<p>Praca w trybie wsadowym polega na wykonywaniu zapisanego w pliku tekstowym ciągu poleceń, dlatego też przed rozpoczęciem programowania warto zapoznać się z działaniem <id_link id="ABC_OF_COMPUTING:posix:bash">basha jako powłoki systemowej</id_link>. Istnieje kilka metod wykonania takiego pliku:</p>
<ul>
	<li><code>. <var>sciezka_do_pliku</var></code> lub ><code>source <var>sciezka_do_pliku</var></code> - polecenia zwarte w podanym pliku wykonane zostaną przez bieżącą instancję basha (przydatne do włączania plików z zmiennymi konfiguracyjnymi,  aby wczytać tylko zmienne z pliku (bez wykonywania zawartych w nim poleceń) możemy skorzystać z następującego kodu <code>eval export `cat config.sh`</code>, wczyta on nawet prawie poprawnie wieloliniowe zmienne z podanego pliku - nowa linia zostanie zastąpiona spacją)</li>
	<li><code>bash <var>sciezka_do_pliku</var></code> - zostanie uruchomiony osobny proces powłoki który wykona polecenia zwarte w podanym pliku</li>
	<li><code><var>sciezka_do_pliku</var></code> (w przypadku gdy jest w bieżącym katalogu to rozpoczęta od <code>./</code>) - jak wyżej z tym że plik musi mieć prawa wykonywalności i zazwyczaj rozpoczyna się (pierwsza linijka) od określenia interpretatora w przypadku Bash'a będzie to <code>#!/bin/bash</code> (uwaga na niektórych systemach bash może być też albo tylko (jak w BeOSie) określany przez ścieżkę /bin/sh); jeżeli taki plik zostanie umieszczony w katalogu będącym w ścieżce wyszukiwania (zmienna $PATH) to może być odpalany po nazwie</li>
</ul>
<p>Skrypty często mają rozszerzenia <code>.sh</code>, jednak także często odchodzi się od tego aby skrypt wywoływany był w oparciu o samą nazwę (tak jak dowolna inna komenda).</p>

<p>Pisanie skryptów bashowych jest w zasadzie typowym programowaniem (i wbrew pozom ten język programowania ma ogromne możliwości i wiele zagadnień można rozwiązać w nim bardzo łatwo i szybko). Program taki korzysta z dowolnych instrukcji powłoki (cd, ...) oraz wywołań innych programów (cp, rm, gawk, grep, ...). W śród wywoływanych zewnętrznych programów na szczególną miejsce zasłużył sobie <id_link id="awk">(g)awk</id_link>, będący interpretowanym językiem programowania służącym do przetwarzania tekstów. Z kolei wśród poleceń wbudowanych powłoki jest bardzo wiele instrukcji przeznaczonych głównie dla skryptów (aczkolwiek każdą z nich można wykorzystać w trybie interaktywnym). W tym miejscu warto także wspomnieć o pakietach takich jak <code>zenity</code>, <code>kdialog</code>, <code>gdialog</code> umożliwiających wyświetlenie z poziomu skryptu okienek dialogowych środowiska graficznego (X'ów) a także o dcop umożliwiającym sterowanie programami KDE z powłoki. Przydatne może być też określenie poleceń wykonywanych gdy następuje przerwanie wykonywania skryptu (np. Ctrl+C lub kill -15) - <code>trap "{ echo "to koniec"; }" EXIT</code>.</p>
</article>
