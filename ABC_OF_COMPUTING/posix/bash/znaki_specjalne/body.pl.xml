<article>
<title>Sztuczki z *[]$()?</title>

<p>Warto też wspomnieć o możliwości korzystania ze znaków wieloznacznych: * - dowolny ciąg znaków niezaczynający się od kropki, ? - dowolny jeden znak, [-xawA-F] - dowolny ze znaków wymienionych : -, x, a, w oraz przedział od A do F. Aby podejrzeć jakie pliki zostaną dopasowane do naszego wzorca polecam <code>echo</code> - np. <code>echo ?[a-z]*</code> wypisze wszystkie pliki mające na drugiej pozycji mała literę (w Unixach wielkość liter ma znaczenie).</p>

<p>Jest także możliwość przekazania wyniku polecenia jako parametru innego polecenia: <code><samp>inne_polecenie</samp> `<samp>polecenie</samp>`</code>, jeżeli chcemy jeszcze bardziej zagnieżdzać zamiast <code>`</code> w Bashu możemy używać konstrukcji z <code>$()</code>, np. <code><samp>inne_polecenie</samp> $(<samp>polecenie</samp>)</code>.</p>

<p>Przy użyciu podwójnych nawiasów możemy korzystać z wbudowanej prostej arytmetyki stałopozycyjnej - <code>echo $((2+2))</code> wypisze 4. Podobnie działają też pojedyncze nawiasy kwadratowe - np. <code>echo $[<samp>2+2</samp>]</code> wypisze 4, należy jednak pamiętać iż metoda z nawiasami kwadratowymi (w odróżnieniu od okrągłych) jest nieprzenośna na inne sh. Prostą artmetykę można realizować także przy pomocy polecenia let - np. <code>let zm++</code> zwiększy wartość zm o jeden, jednak jest to równierz metoda nieprzenośna na inne sh. Do bardziej zaawansowanej matematyki wykorzystać można program bc - <code>echo "2+2" | bc</code> robi to samo ... (więcej <man section="1">bc</man>).</p>

<p>Kolejną sztuczką jest wbudowane przetwarzanie napisów przy pomocy <code>{%}</code>, np. <code>echo ${PATH%:*}</code> wybisze zawartość zmiennej $PATH bez ostatniego członu (po ostatnim :), proktycznym zastosowaniem może być np. masowa zamiana rozszerzeń plików <code>for f in *.txt ; do mv "$f" "${f%.txt}.htm"; done</code>. Inne zastosowanie klamerek (podstawienia wielkrotne każdy z każdym) pokazuje <code>echo A{7,8}X{1,2}</code>. Warto także wspomnieć o różnicy między <code>echo $zmienna</code> a <code>echo "$zmienna"</code>, gdy zmienna zawiera znaki nowej linii (w pierwszym wypadku zostaną ope zastąpione spacjami). Więcej o tego typu sztuczkach w części o <id_link id="ABC_OF_COMPUTING:programing:bash:zmienne">zmiennych</id_link>.</p>
</article>
