/**
 *
 * program umożliwiający odczyt temperatury z termometru DS18b20 na komputerze PC
 *
 *
**/

#include <stdio.h>
#include <sys/io.h>

#define bool char

#define cli() asm("cli")
#define sti() asm("sti")


long long czas() { asm( "rdtsc" ); }
void _delay_us( long long l ) {
	l = l * 3012 + czas(); // prędkość procesora w MHz
	while( l > czas() );
}
#define _delay_ms(a) _delay_us( 1000*(a) )


// dane => pin 16 (INT) portu LPT
// GND => piny 18 - 25 portu LPT
// +5V => pin 1 (STROBE) portu LPT
#define onewire_send_zero()  outb(0x01, 0x37a)
#define onewire_send_jeden() outb(0x05, 0x37a)
#define onewire_read()       (inb(0x37a) & 0x04) >> 2

#include "onewire.c"

int read_temp(const char* numer) {
	unsigned char t0, t1;
	unsigned char i;
	onewire_command(0xbe, numer);
	t0 = onewire_reply();
	t1 = onewire_reply();
	printf("%x %x\n", t0, t1);
	printf("%d.%d\n", (t1 << 4 | t0 >> 4), (t0 & 0x0f) * 625 );
	printf("%f\n", (short)(t1 << 8 | t0) / 16.0);
}

int switch_temp(char num) {
	switch(num) {
		case 1: {
			puts("\n TEMP1 \n");
			const char numer[8]={0x28, 0xac, 0x49, 0x27, 0x01, 0x00, 0x00, 0x78};
			read_temp(numer);
			break;
		}
		case 2: {
			puts("\n TEMP2 \n");
			const char numer[8]={0x28, 0x1b, 0xe6, 0x65, 0x01, 0x00, 0x00, 0x41};
			read_temp(numer);
			break;
		}
		default:
			return -1;
	}
}


main(int argc, char *argv[]){
	iopl (3);
	
	onewire_command(0x44, NULL);
	send_jeden();
	_delay_us(1000000);
	
	if (argc == 0) {
		char i;
		for (i=0; i<=5; i++) {
			switch_temp(i);
			sleep(1);
		}
	} else {
		switch_temp(atoi(argv[1]);
	}
}
